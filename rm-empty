#!/usr/bin/env python3

# rm-empty
#
# Copyright (C) 2020-2025 James D. Lin.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
Recursively removes all empty directories and empty files from specified
directory trees.
"""

# TODO: Add an interactive mode that prompts before removal?

import argparse
from collections import OrderedDict
import os
import sys
import typing


def normalize_path(path: str, assume_dir: bool = False) -> str:
    """
    Normalizes a path for consistency.

    If the path ends with a directory separator or if `assume_dir` is `True`,
    assumes that the path is for a directory and returns a normalized path that
    includes a trailing directory separator.
    """
    assume_dir = assume_dir or path.endswith(os.path.sep)
    normalized = os.path.normcase(os.path.normpath(path))
    return os.path.join(normalized, "") if assume_dir else normalized


def is_empty_file(path: str) -> bool:
    """Returns whether the specified path refers to a 0-byte file."""
    return os.path.isfile(path) and os.path.getsize(path) == 0


def find_empty(*,
               root: str,
               keep_empty_files: bool,
               subdirs_to_remove: typing.OrderedDict[str, None],
               empty_files: typing.OrderedDict[str, None]) -> bool:
    """
    Collects paths to empty directories and files within the specified root
    path.  Empty directories and files will be added to the `subdirs_to_remove`
    and `empty_files` output argumens.
    """
    if not os.path.isdir(root):
        print(f"{__name__}: \"{root}\" is not a valid directory.",
              file=sys.stderr)
        return False

    # Queue work.
    for (dirpath, subdirs, filenames) in os.walk(root, topdown=False):
        must_keep_dir = False
        if keep_empty_files:
            # If we're keeping empty files, then the existence of *any* file
            # means that we must keep the directory too.
            must_keep_dir = bool(filenames)
        else:
            for filename in filenames:
                file_path = os.path.join(dirpath, filename)
                if is_empty_file(file_path):
                    empty_files[file_path] = None
                else:
                    must_keep_dir = True

        if not must_keep_dir:
            # If all subdirectories have been queued for removal, then this
            # directory may be removed too.
            for subdir in subdirs:
                subdir_path = os.path.join(dirpath, subdir)
                if subdir_path not in subdirs_to_remove:
                    must_keep_dir = True
                    break

        if not must_keep_dir:
            subdirs_to_remove[dirpath] = None

    return True


def main(argv: typing.List[str]) -> int:
    ap = argparse.ArgumentParser(description=__doc__.strip(), add_help=False)
    ap.add_argument("-h", "--help", action="help",
                    help="Show this help message and exit.")
    ap.add_argument("--dry-run", action="store_true",
                    help="Print what would be done and do not make any "
                         "changes.")
    ap.add_argument("-f", "--keep-empty-files", action="store_true",
                    help="Preserve 0-byte files.")
    ap.add_argument("--remove-empty-roots", action="store_true",
                    help="If specified, removes the directories passed as "
                         "command-line arguments if they are empty.")
    ap.add_argument("-q", "--quiet", action="store_true",
                    help="Do not print what actions were performed.")
    ap.add_argument("roots", metavar="DIRECTORY", nargs="*", default=".",
                    help="One or more directories to remove empty "
                         "directories/files from.  By default, these "
                         "directories will not be removed, even if they are "
                         "empty.  If not specified, uses the current "
                         "directory.")

    args = ap.parse_args(argv[1:])

    # Python's standard library doesn't include a `Set` type that preserves
    # insertion order, so we'll use an `OrderedDict` instead where we ignore
    # the values.
    subdirs_to_remove: typing.OrderedDict[str, None] = OrderedDict()
    empty_files: typing.OrderedDict[str, None] = OrderedDict()

    success = True

    args.roots = [normalize_path(root, assume_dir=True) for root in args.roots]

    for root in args.roots:
        if not find_empty(root=root,
                          keep_empty_files=args.keep_empty_files,
                          subdirs_to_remove=subdirs_to_remove,
                          empty_files=empty_files):
            success = False

    if not args.remove_empty_roots:
        # Avoid removing the initial directories.
        for root in args.roots:
            try:
                del subdirs_to_remove[root]
                if not args.quiet:
                    print(f"{__name__}: Not removing argument directory: "
                          f"{root}")
            except KeyError:
                pass

    cwd = os.path.realpath(os.getcwd())

    # Apply changes.
    for f in empty_files.keys():
        f = normalize_path(f)
        try:
            if not args.dry_run:
                os.remove(f)
            if not args.quiet:
                print(f"Removed empty file: {f}")
        except OSError as e:
            print(f"{__name__}: Failed to remove \"{f}\": "
                  f"{e.strerror} ({e.errno})",
                  file=sys.stderr)
            success = False

    for d in subdirs_to_remove.keys():
        d = normalize_path(d, assume_dir=True)
        if os.path.realpath(d) == cwd:
            print(f"Not removing current directory: {d}")
            continue
        try:
            if not args.dry_run:
                os.rmdir(d)
            if not args.quiet:
                print(f"Removed empty directory: {d}")
        except OSError as e:
            print(f"{__name__}: Failed to remove \"{d}\": "
                  f"{e.strerror} ({e.errno})",
                  file=sys.stderr)
            success = False

    return 0 if success else 1


if __name__ == "__main__":
    __name__ = os.path.basename(__file__)  # pylint: disable=redefined-builtin

    try:
        sys.exit(main(sys.argv))
    except KeyboardInterrupt:
        sys.exit(1)
